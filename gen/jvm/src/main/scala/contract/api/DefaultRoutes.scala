//> using scala "3.3.1"
//> using lib "com.lihaoyi::cask:0.8.3"
//> using lib "com.lihaoyi::scalatags:0.12.0"
/** Contract Management API API for managing draft contracts
  *
  * OpenAPI spec version: 1.0.0
  *
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator.
  *
  * https://openapi-generator.tech
  */

// this is generated from apiRoutes.mustache
package contract.api

import contract.model.*

import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

import contract.model.CreateContract400Response
import contract.model.CreateContract500Response
import contract.model.CreateContractRequest
import contract.model.CreateDraftResponse
import contract.model.SignDraftContract200Response
import contract.model.SignDraftContract500Response
import contract.model.SignDraftContractRequest

class DefaultRoutes(service: DefaultService) extends cask.Routes {

  /** Create a new draft contract
    */
  @cask.post("/v1/contract")
  def createContract(request: cask.Request) = {

    def failFast = request.queryParams.keySet.contains("failFast")

    val result = for {
      createContractRequestData <- Parsed
        .eval(CreateContractRequestData.fromJsonString(request.bodyAsString))
        .mapError(e =>
          s"Error parsing json as CreateContractRequest from >${request.bodyAsString}< : ${e}"
        ) /* not array or map */
      createContractRequest <- Parsed.fromTry(createContractRequestData.validated(failFast))
      result                <- Parsed.eval(service.createContract(createContractRequest))
    } yield result

    result match {
      case Left(error) => cask.Response(error, 500)
      case Right(value: CreateDraftResponse) =>
        cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
      case Right(value: CreateContract400Response) =>
        cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
      case Right(value: CreateContract500Response) =>
        cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
      case Right(other) => cask.Response(s"$other", 200)
    }
  }

  /** Receive signature status for draft contract
    */
  @cask.post("/v1/sign")
  def signDraftContract(request: cask.Request) = {

    def failFast = request.queryParams.keySet.contains("failFast")

    val result = for {
      signDraftContractRequestData <- Parsed
        .eval(SignDraftContractRequestData.fromJsonString(request.bodyAsString))
        .mapError(e =>
          s"Error parsing json as SignDraftContractRequest from >${request.bodyAsString}< : ${e}"
        ) /* not array or map */
      signDraftContractRequest <- Parsed.fromTry(signDraftContractRequestData.validated(failFast))
      result                   <- Parsed.eval(service.signDraftContract(signDraftContractRequest))
    } yield result

    result match {
      case Left(error) => cask.Response(error, 500)
      case Right(value: SignDraftContract200Response) =>
        cask.Response(data = write(value), 200, headers = Seq("Content-Type" -> "application/json"))
      case Right(value: CreateContract400Response) =>
        cask.Response(data = write(value), 400, headers = Seq("Content-Type" -> "application/json"))
      case Right(value: SignDraftContract500Response) =>
        cask.Response(data = write(value), 500, headers = Seq("Content-Type" -> "application/json"))
      case Right(other) => cask.Response(s"$other", 200)
    }
  }

  initialize()
}
