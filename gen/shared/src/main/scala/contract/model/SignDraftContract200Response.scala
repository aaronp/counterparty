/** Contract Management API API for managing draft contracts
  *
  * OpenAPI spec version: 1.0.0
  *
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator.
  *
  * https://openapi-generator.tech
  */

// this model was generated using model.mustache
package contract.model
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class SignDraftContract200Response(
    /* Indicates if counterparty A has signed the contract. */
    counterpartyASigned: Boolean,

    /* Indicates if counterparty B has signed the contract. */
    counterpartyBSigned: Boolean,

    /* Reason why counterparty A has not signed the contract. */
    counterpartyANotSignedReason: Option[String] = None,

    /* Reason why counterparty B has not signed the contract. */
    counterpartyBNotSignedReason: Option[String] = None
) {

  def asJson: String = asData.asJson

  def asData: SignDraftContract200ResponseData = {
    SignDraftContract200ResponseData(
      counterpartyASigned = counterpartyASigned,
      counterpartyBSigned = counterpartyBSigned,
      counterpartyANotSignedReason = counterpartyANotSignedReason.getOrElse(""),
      counterpartyBNotSignedReason = counterpartyBNotSignedReason.getOrElse("")
    )
  }

}

object SignDraftContract200Response {

  given RW[SignDraftContract200Response] = SignDraftContract200ResponseData.readWriter
    .bimap[SignDraftContract200Response](_.asData, _.asModel)

  enum Fields(fieldName: String) extends Field(fieldName) {
    case counterpartyASigned          extends Fields("counterpartyASigned")
    case counterpartyBSigned          extends Fields("counterpartyBSigned")
    case counterpartyANotSignedReason extends Fields("counterpartyANotSignedReason")
    case counterpartyBNotSignedReason extends Fields("counterpartyBNotSignedReason")
  }

}
